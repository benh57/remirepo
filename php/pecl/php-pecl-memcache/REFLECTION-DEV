Extension [ <persistent> extension #105 memcache version 3.0.9-dev ] {

  - INI {
    Entry [ memcache.allow_failover <ALL> ]
      Current = '1'
    }
    Entry [ memcache.max_failover_attempts <ALL> ]
      Current = '20'
    }
    Entry [ memcache.default_port <ALL> ]
      Current = '11211'
    }
    Entry [ memcache.chunk_size <ALL> ]
      Current = '32768'
    }
    Entry [ memcache.protocol <ALL> ]
      Current = 'ascii'
    }
    Entry [ memcache.hash_strategy <ALL> ]
      Current = 'consistent'
    }
    Entry [ memcache.hash_function <ALL> ]
      Current = 'crc32'
    }
    Entry [ memcache.redundancy <ALL> ]
      Current = '1'
    }
    Entry [ memcache.session_redundancy <ALL> ]
      Current = '2'
    }
    Entry [ memcache.compress_threshold <ALL> ]
      Current = '20000'
    }
    Entry [ memcache.lock_timeout <ALL> ]
      Current = '15'
    }
  }

  - Constants [6] {
    Constant [ integer MEMCACHE_COMPRESSED ] { 2 }
    Constant [ integer MEMCACHE_USER1 ] { 65536 }
    Constant [ integer MEMCACHE_USER2 ] { 131072 }
    Constant [ integer MEMCACHE_USER3 ] { 262144 }
    Constant [ integer MEMCACHE_USER4 ] { 524288 }
    Constant [ integer MEMCACHE_HAVE_SESSION ] { 1 }
  }

  - Functions {
    Function [ <internal:memcache> function memcache_connect ] {
    }
    Function [ <internal:memcache> function memcache_pconnect ] {
    }
    Function [ <internal:memcache> function memcache_add_server ] {
    }
    Function [ <internal:memcache> function memcache_set_server_params ] {
    }
    Function [ <internal:memcache> function memcache_set_failure_callback ] {
    }
    Function [ <internal:memcache> function memcache_get_server_status ] {
    }
    Function [ <internal:memcache> function memcache_get_version ] {
    }
    Function [ <internal:memcache> function memcache_add ] {
    }
    Function [ <internal:memcache> function memcache_set ] {
    }
    Function [ <internal:memcache> function memcache_replace ] {
    }
    Function [ <internal:memcache> function memcache_cas ] {
    }
    Function [ <internal:memcache> function memcache_append ] {
    }
    Function [ <internal:memcache> function memcache_prepend ] {
    }
    Function [ <internal:memcache> function memcache_get ] {

      - Parameters [4] {
        Parameter #0 [ <required> $param0 ]
        Parameter #1 [ <required> $param1 ]
        Parameter #2 [ <required> &$param2 ]
        Parameter #3 [ <required> &$param3 ]
      }
    }
    Function [ <internal:memcache> function memcache_delete ] {
    }
    Function [ <internal:memcache> function memcache_debug ] {
    }
    Function [ <internal:memcache> function memcache_get_stats ] {
    }
    Function [ <internal:memcache> function memcache_get_extended_stats ] {
    }
    Function [ <internal:memcache> function memcache_set_compress_threshold ] {
    }
    Function [ <internal:memcache> function memcache_increment ] {
    }
    Function [ <internal:memcache> function memcache_decrement ] {
    }
    Function [ <internal:memcache> function memcache_close ] {
    }
    Function [ <internal:memcache> function memcache_flush ] {
    }
    Function [ <internal:memcache> function memcache_set_sasl_auth_data ] {
    }
  }

  - Classes [2] {
    Class [ <internal:memcache> class MemcachePool ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [23] {
        Method [ <internal:memcache> public method connect ] {
        }

        Method [ <internal:memcache> public method addserver ] {
        }

        Method [ <internal:memcache> public method setserverparams ] {
        }

        Method [ <internal:memcache> public method setfailurecallback ] {
        }

        Method [ <internal:memcache> public method getserverstatus ] {
        }

        Method [ <internal:memcache> public method findserver ] {
        }

        Method [ <internal:memcache> public method getversion ] {
        }

        Method [ <internal:memcache> public method add ] {
        }

        Method [ <internal:memcache> public method set ] {
        }

        Method [ <internal:memcache> public method replace ] {
        }

        Method [ <internal:memcache> public method cas ] {
        }

        Method [ <internal:memcache> public method append ] {
        }

        Method [ <internal:memcache> public method prepend ] {
        }

        Method [ <internal:memcache> public method get ] {

          - Parameters [3] {
            Parameter #0 [ <required> $param0 ]
            Parameter #1 [ <required> &$param1 ]
            Parameter #2 [ <required> &$param2 ]
          }
        }

        Method [ <internal:memcache> public method delete ] {
        }

        Method [ <internal:memcache> public method getstats ] {
        }

        Method [ <internal:memcache> public method getextendedstats ] {
        }

        Method [ <internal:memcache> public method setcompressthreshold ] {
        }

        Method [ <internal:memcache> public method increment ] {
        }

        Method [ <internal:memcache> public method decrement ] {
        }

        Method [ <internal:memcache> public method close ] {
        }

        Method [ <internal:memcache> public method flush ] {
        }

        Method [ <internal:memcache> public method setSaslAuthData ] {
        }
      }
    }

    Class [ <internal:memcache> class Memcache extends MemcachePool ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [24] {
        Method [ <internal:memcache, overwrites MemcachePool, prototype MemcachePool> public method connect ] {
        }

        Method [ <internal:memcache> public method pconnect ] {
        }

        Method [ <internal:memcache, overwrites MemcachePool, prototype MemcachePool> public method addserver ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method setserverparams ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method setfailurecallback ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method getserverstatus ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method findserver ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method getversion ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method add ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method set ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method replace ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method cas ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method append ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method prepend ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method get ] {

          - Parameters [3] {
            Parameter #0 [ <required> $param0 ]
            Parameter #1 [ <required> &$param1 ]
            Parameter #2 [ <required> &$param2 ]
          }
        }

        Method [ <internal:memcache, inherits MemcachePool> public method delete ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method getstats ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method getextendedstats ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method setcompressthreshold ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method increment ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method decrement ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method close ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method flush ] {
        }

        Method [ <internal:memcache, inherits MemcachePool> public method setSaslAuthData ] {
        }
      }
    }
  }
}

