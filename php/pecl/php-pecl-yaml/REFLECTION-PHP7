Extension [ <persistent> extension #137 yaml version 2.0.0 ] {

  - Dependencies {
    Dependency [ date (Optional) ]
  }

  - INI {
    Entry [ yaml.decode_binary <ALL> ]
      Current = '0'
    }
    Entry [ yaml.decode_timestamp <ALL> ]
      Current = '0'
    }
    Entry [ yaml.decode_php <ALL> ]
      Current = '0'
    }
    Entry [ yaml.output_canonical <ALL> ]
      Current = '0'
    }
    Entry [ yaml.output_indent <ALL> ]
      Current = '2'
    }
    Entry [ yaml.output_width <ALL> ]
      Current = '80'
    }
  }

  - Constants [25] {
    Constant [ integer YAML_ANY_SCALAR_STYLE ] { 0 }
    Constant [ integer YAML_PLAIN_SCALAR_STYLE ] { 1 }
    Constant [ integer YAML_SINGLE_QUOTED_SCALAR_STYLE ] { 2 }
    Constant [ integer YAML_DOUBLE_QUOTED_SCALAR_STYLE ] { 3 }
    Constant [ integer YAML_LITERAL_SCALAR_STYLE ] { 4 }
    Constant [ integer YAML_FOLDED_SCALAR_STYLE ] { 5 }
    Constant [ string YAML_NULL_TAG ] { tag:yaml.org,2002:null }
    Constant [ string YAML_BOOL_TAG ] { tag:yaml.org,2002:bool }
    Constant [ string YAML_STR_TAG ] { tag:yaml.org,2002:str }
    Constant [ string YAML_INT_TAG ] { tag:yaml.org,2002:int }
    Constant [ string YAML_FLOAT_TAG ] { tag:yaml.org,2002:float }
    Constant [ string YAML_TIMESTAMP_TAG ] { tag:yaml.org,2002:timestamp }
    Constant [ string YAML_SEQ_TAG ] { tag:yaml.org,2002:seq }
    Constant [ string YAML_MAP_TAG ] { tag:yaml.org,2002:map }
    Constant [ string YAML_PHP_TAG ] { !php/object }
    Constant [ string YAML_MERGE_TAG ] { tag:yaml.org,2002:merge }
    Constant [ string YAML_BINARY_TAG ] { tag:yaml.org,2002:binary }
    Constant [ integer YAML_ANY_ENCODING ] { 0 }
    Constant [ integer YAML_UTF8_ENCODING ] { 1 }
    Constant [ integer YAML_UTF16LE_ENCODING ] { 2 }
    Constant [ integer YAML_UTF16BE_ENCODING ] { 3 }
    Constant [ integer YAML_ANY_BREAK ] { 0 }
    Constant [ integer YAML_CR_BREAK ] { 1 }
    Constant [ integer YAML_LN_BREAK ] { 2 }
    Constant [ integer YAML_CRLN_BREAK ] { 3 }
  }

  - Functions {
    Function [ <internal:yaml> function yaml_parse ] {

      - Parameters [4] {
        Parameter #0 [ <required> $input ]
        Parameter #1 [ <optional> $pos ]
        Parameter #2 [ <optional> &$ndocs ]
        Parameter #3 [ <optional> array $callbacks ]
      }
    }
    Function [ <internal:yaml> function yaml_parse_file ] {

      - Parameters [4] {
        Parameter #0 [ <required> $filename ]
        Parameter #1 [ <optional> $pos ]
        Parameter #2 [ <optional> &$ndocs ]
        Parameter #3 [ <optional> array $callbacks ]
      }
    }
    Function [ <internal:yaml> function yaml_parse_url ] {

      - Parameters [4] {
        Parameter #0 [ <required> $url ]
        Parameter #1 [ <optional> $pos ]
        Parameter #2 [ <optional> &$ndocs ]
        Parameter #3 [ <optional> array $callbacks ]
      }
    }
    Function [ <internal:yaml> function yaml_emit ] {

      - Parameters [4] {
        Parameter #0 [ <required> $data ]
        Parameter #1 [ <optional> $encoding ]
        Parameter #2 [ <optional> $linebreak ]
        Parameter #3 [ <optional> array $callbacks ]
      }
    }
    Function [ <internal:yaml> function yaml_emit_file ] {

      - Parameters [5] {
        Parameter #0 [ <required> $filename ]
        Parameter #1 [ <required> $data ]
        Parameter #2 [ <optional> $encoding ]
        Parameter #3 [ <optional> $linebreak ]
        Parameter #4 [ <optional> array $callbacks ]
      }
    }
  }
}

