Extension [ <persistent> extension #157 event version 2.3.0RC1 ] {

  - Dependencies {
    Dependency [ sockets (Required) ]
  }

  - Classes [12] {
    Class [ <internal:event> final class Event ] {

      - Constants [6] {
        Constant [ integer ET ] { 32 }
        Constant [ integer PERSIST ] { 16 }
        Constant [ integer READ ] { 2 }
        Constant [ integer WRITE ] { 4 }
        Constant [ integer SIGNAL ] { 8 }
        Constant [ integer TIMEOUT ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [3] {
        Method [ <internal:event> static public method getSupportedMethods ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> static public method timer ] {

          - Parameters [3] {
            Parameter #0 [ <required> EventBase $base ]
            Parameter #1 [ <required> $cb ]
            Parameter #2 [ <optional> $arg ]
          }
        }

        Method [ <internal:event> static public method signal ] {

          - Parameters [4] {
            Parameter #0 [ <required> EventBase $base ]
            Parameter #1 [ <required> $signum ]
            Parameter #2 [ <required> $cb ]
            Parameter #3 [ <optional> $arg ]
          }
        }
      }

      - Properties [2] {
        Property [ <default> public $pending ]
        Property [ <default> public $data ]
      }

      - Methods [12] {
        Method [ <internal:event, ctor> public method __construct ] {

          - Parameters [5] {
            Parameter #0 [ <required> EventBase $base ]
            Parameter #1 [ <required> $fd ]
            Parameter #2 [ <required> $what ]
            Parameter #3 [ <required> $cb ]
            Parameter #4 [ <optional> $arg ]
          }
        }

        Method [ <internal:event> public method free ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method set ] {

          - Parameters [5] {
            Parameter #0 [ <required> EventBase $base ]
            Parameter #1 [ <required> $fd ]
            Parameter #2 [ <optional> $what ]
            Parameter #3 [ <optional> $cb ]
            Parameter #4 [ <optional> $arg ]
          }
        }

        Method [ <internal:event> public method add ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $timeout ]
          }
        }

        Method [ <internal:event> public method del ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method setPriority ] {

          - Parameters [1] {
            Parameter #0 [ <required> $priority ]
          }
        }

        Method [ <internal:event> public method pending ] {

          - Parameters [1] {
            Parameter #0 [ <required> $flags ]
          }
        }

        Method [ <internal:event> public method setTimer ] {

          - Parameters [3] {
            Parameter #0 [ <required> EventBase $base ]
            Parameter #1 [ <required> $cb ]
            Parameter #2 [ <optional> $arg ]
          }
        }

        Method [ <internal:event> public method addTimer ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $timeout ]
          }
        }

        Method [ <internal:event> public method delTimer ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method addSignal ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $timeout ]
          }
        }

        Method [ <internal:event> public method delSignal ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:event> final class EventBase ] {

      - Constants [6] {
        Constant [ integer LOOP_ONCE ] { 1 }
        Constant [ integer LOOP_NONBLOCK ] { 2 }
        Constant [ integer NOLOCK ] { 1 }
        Constant [ integer STARTUP_IOCP ] { 4 }
        Constant [ integer NO_CACHE_TIME ] { 8 }
        Constant [ integer EPOLL_USE_CHANGELIST ] { 16 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [13] {
        Method [ <internal:event, ctor> public method __construct ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $cfg ]
          }
        }

        Method [ <internal:event> public method getMethod ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $cfg ]
          }
        }

        Method [ <internal:event> public method getFeatures ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method priorityInit ] {

          - Parameters [1] {
            Parameter #0 [ <required> $n_priorities ]
          }
        }

        Method [ <internal:event> public method loop ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $flags ]
          }
        }

        Method [ <internal:event> public method dispatch ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method exit ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $timeout ]
          }
        }

        Method [ <internal:event> public method stop ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method gotStop ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method gotExit ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getTimeOfDayCached ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method reInit ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method free ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:event> final class EventConfig ] {

      - Constants [3] {
        Constant [ integer FEATURE_ET ] { 1 }
        Constant [ integer FEATURE_O1 ] { 2 }
        Constant [ integer FEATURE_FDS ] { 4 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [3] {
        Method [ <internal:event, ctor> public method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method avoidMethod ] {

          - Parameters [1] {
            Parameter #0 [ <required> $method ]
          }
        }

        Method [ <internal:event> public method requireFeatures ] {

          - Parameters [1] {
            Parameter #0 [ <required> $feature ]
          }
        }
      }
    }

    Class [ <internal:event> final class EventBufferEvent ] {

      - Constants [13] {
        Constant [ integer READING ] { 1 }
        Constant [ integer WRITING ] { 2 }
        Constant [ integer EOF ] { 16 }
        Constant [ integer ERROR ] { 32 }
        Constant [ integer TIMEOUT ] { 64 }
        Constant [ integer CONNECTED ] { 128 }
        Constant [ integer OPT_CLOSE_ON_FREE ] { 1 }
        Constant [ integer OPT_THREADSAFE ] { 2 }
        Constant [ integer OPT_DEFER_CALLBACKS ] { 4 }
        Constant [ integer OPT_UNLOCK_CALLBACKS ] { 8 }
        Constant [ integer SSL_OPEN ] { 0 }
        Constant [ integer SSL_CONNECTING ] { 1 }
        Constant [ integer SSL_ACCEPTING ] { 2 }
      }

      - Static properties [0] {
      }

      - Static methods [4] {
        Method [ <internal:event> static public method createPair ] {

          - Parameters [2] {
            Parameter #0 [ <required> EventBase $base ]
            Parameter #1 [ <optional> $options ]
          }
        }

        Method [ <internal, deprecated:event> static public method sslFilter ] {

          - Parameters [5] {
            Parameter #0 [ <required> $unused ]
            Parameter #1 [ <required> EventBufferEvent $underlying ]
            Parameter #2 [ <required> EventSslContext $ctx ]
            Parameter #3 [ <required> $state ]
            Parameter #4 [ <optional> $options ]
          }
        }

        Method [ <internal:event> static public method createSslFilter ] {

          - Parameters [4] {
            Parameter #0 [ <required> EventBufferEvent $underlying ]
            Parameter #1 [ <required> EventSslContext $ctx ]
            Parameter #2 [ <required> $state ]
            Parameter #3 [ <optional> $options ]
          }
        }

        Method [ <internal:event> static public method sslSocket ] {

          - Parameters [5] {
            Parameter #0 [ <required> EventBase $base ]
            Parameter #1 [ <required> $socket ]
            Parameter #2 [ <required> EventSslContext $ctx ]
            Parameter #3 [ <required> $state ]
            Parameter #4 [ <optional> $options ]
          }
        }
      }

      - Properties [4] {
        Property [ <default> public $priority ]
        Property [ <default> public $fd ]
        Property [ <default> public $input ]
        Property [ <default> public $output ]
      }

      - Methods [25] {
        Method [ <internal:event, ctor> public method __construct ] {

          - Parameters [6] {
            Parameter #0 [ <required> EventBase $base ]
            Parameter #1 [ <optional> $socket ]
            Parameter #2 [ <optional> $options ]
            Parameter #3 [ <optional> $readcb ]
            Parameter #4 [ <optional> $writecb ]
            Parameter #5 [ <optional> $eventcb ]
          }
        }

        Method [ <internal:event> public method free ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method close ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method connect ] {

          - Parameters [1] {
            Parameter #0 [ <required> $addr ]
          }
        }

        Method [ <internal:event> public method connectHost ] {

          - Parameters [4] {
            Parameter #0 [ <required> $dns_base ]
            Parameter #1 [ <required> $hostname ]
            Parameter #2 [ <required> $port ]
            Parameter #3 [ <optional> $family ]
          }
        }

        Method [ <internal:event> public method getDnsErrorString ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method setCallbacks ] {

          - Parameters [4] {
            Parameter #0 [ <required> $readcb ]
            Parameter #1 [ <required> $writecb ]
            Parameter #2 [ <required> $eventcb ]
            Parameter #3 [ <optional> $arg ]
          }
        }

        Method [ <internal:event> public method enable ] {

          - Parameters [1] {
            Parameter #0 [ <required> $events ]
          }
        }

        Method [ <internal:event> public method disable ] {

          - Parameters [1] {
            Parameter #0 [ <required> $events ]
          }
        }

        Method [ <internal:event> public method getEnabled ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getInput ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getOutput ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method setWatermark ] {

          - Parameters [3] {
            Parameter #0 [ <required> $events ]
            Parameter #1 [ <required> $lowmark ]
            Parameter #2 [ <required> $highmark ]
          }
        }

        Method [ <internal:event> public method write ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:event> public method writeBuffer ] {

          - Parameters [1] {
            Parameter #0 [ <required> $buf ]
          }
        }

        Method [ <internal:event> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $size ]
          }
        }

        Method [ <internal:event> public method readBuffer ] {

          - Parameters [1] {
            Parameter #0 [ <required> $buf ]
          }
        }

        Method [ <internal:event> public method setPriority ] {

          - Parameters [1] {
            Parameter #0 [ <required> $priority ]
          }
        }

        Method [ <internal:event> public method setTimeouts ] {

          - Parameters [2] {
            Parameter #0 [ <required> $timeout_read ]
            Parameter #1 [ <required> $timeout_write ]
          }
        }

        Method [ <internal:event> public method sslError ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method sslRenegotiate ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method sslGetCipherInfo ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method sslGetCipherName ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method sslGetCipherVersion ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method sslGetProtocol ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:event> class EventBuffer ] {

      - Constants [6] {
        Constant [ integer EOL_ANY ] { 0 }
        Constant [ integer EOL_CRLF ] { 1 }
        Constant [ integer EOL_CRLF_STRICT ] { 2 }
        Constant [ integer EOL_LF ] { 3 }
        Constant [ integer PTR_SET ] { 0 }
        Constant [ integer PTR_ADD ] { 1 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> public $length ]
        Property [ <default> public $contiguous_space ]
      }

      - Methods [22] {
        Method [ <internal:event, ctor> public method __construct ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method freeze ] {

          - Parameters [1] {
            Parameter #0 [ <required> $at_front ]
          }
        }

        Method [ <internal:event> public method unfreeze ] {

          - Parameters [1] {
            Parameter #0 [ <required> $at_front ]
          }
        }

        Method [ <internal:event> public method lock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method unlock ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method enableLocking ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method add ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:event> public method addBuffer ] {

          - Parameters [1] {
            Parameter #0 [ <required> $buf ]
          }
        }

        Method [ <internal:event> public method appendFrom ] {

          - Parameters [2] {
            Parameter #0 [ <required> $buf ]
            Parameter #1 [ <required> $len ]
          }
        }

        Method [ <internal:event> public method read ] {

          - Parameters [1] {
            Parameter #0 [ <required> $max_bytes ]
          }
        }

        Method [ <internal:event> public method expand ] {

          - Parameters [1] {
            Parameter #0 [ <required> $len ]
          }
        }

        Method [ <internal:event> public method prepend ] {

          - Parameters [1] {
            Parameter #0 [ <required> $data ]
          }
        }

        Method [ <internal:event> public method prependBuffer ] {

          - Parameters [1] {
            Parameter #0 [ <required> $buf ]
          }
        }

        Method [ <internal:event> public method drain ] {

          - Parameters [1] {
            Parameter #0 [ <required> $len ]
          }
        }

        Method [ <internal:event> public method copyout ] {

          - Parameters [2] {
            Parameter #0 [ <required> &$data ]
            Parameter #1 [ <required> $max_bytes ]
          }
        }

        Method [ <internal:event> public method readLine ] {

          - Parameters [1] {
            Parameter #0 [ <required> $eol_style ]
          }
        }

        Method [ <internal:event> public method search ] {

          - Parameters [3] {
            Parameter #0 [ <required> $what ]
            Parameter #1 [ <optional> $start ]
            Parameter #2 [ <optional> $end ]
          }
        }

        Method [ <internal:event> public method searchEol ] {

          - Parameters [2] {
            Parameter #0 [ <optional> $start ]
            Parameter #1 [ <optional> $eol_style ]
          }
        }

        Method [ <internal:event> public method pullup ] {

          - Parameters [1] {
            Parameter #0 [ <required> $size ]
          }
        }

        Method [ <internal:event> public method write ] {

          - Parameters [2] {
            Parameter #0 [ <required> $fd ]
            Parameter #1 [ <optional> $howmuch ]
          }
        }

        Method [ <internal:event> public method readFrom ] {

          - Parameters [2] {
            Parameter #0 [ <required> $fd ]
            Parameter #1 [ <optional> $howmuch ]
          }
        }

        Method [ <internal:event> public method substr ] {

          - Parameters [2] {
            Parameter #0 [ <required> $start ]
            Parameter #1 [ <optional> $length ]
          }
        }
      }
    }

    Class [ <internal:event> final class EventDnsBase ] {

      - Constants [5] {
        Constant [ integer OPTION_SEARCH ] { 1 }
        Constant [ integer OPTION_NAMESERVERS ] { 2 }
        Constant [ integer OPTION_MISC ] { 4 }
        Constant [ integer OPTION_HOSTSFILE ] { 8 }
        Constant [ integer OPTIONS_ALL ] { 15 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [9] {
        Method [ <internal:event, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> EventBase $base ]
            Parameter #1 [ <required> $initialize ]
          }
        }

        Method [ <internal:event> public method parseResolvConf ] {

          - Parameters [2] {
            Parameter #0 [ <required> $flags ]
            Parameter #1 [ <required> $filename ]
          }
        }

        Method [ <internal:event> public method addNameserverIp ] {

          - Parameters [1] {
            Parameter #0 [ <required> $ip ]
          }
        }

        Method [ <internal:event> public method loadHosts ] {

          - Parameters [1] {
            Parameter #0 [ <required> $hosts ]
          }
        }

        Method [ <internal:event> public method clearSearch ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method addSearch ] {

          - Parameters [1] {
            Parameter #0 [ <required> $domain ]
          }
        }

        Method [ <internal:event> public method setSearchNdots ] {

          - Parameters [1] {
            Parameter #0 [ <required> $ndots ]
          }
        }

        Method [ <internal:event> public method setOption ] {

          - Parameters [2] {
            Parameter #0 [ <required> $option ]
            Parameter #1 [ <required> $value ]
          }
        }

        Method [ <internal:event> public method countNameservers ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:event> final class EventListener ] {

      - Constants [5] {
        Constant [ integer OPT_LEAVE_SOCKETS_BLOCKING ] { 1 }
        Constant [ integer OPT_CLOSE_ON_FREE ] { 2 }
        Constant [ integer OPT_CLOSE_ON_EXEC ] { 4 }
        Constant [ integer OPT_REUSEABLE ] { 8 }
        Constant [ integer OPT_THREADSAFE ] { 16 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [1] {
        Property [ <default> public $fd ]
      }

      - Methods [8] {
        Method [ <internal:event, ctor> public method __construct ] {

          - Parameters [6] {
            Parameter #0 [ <required> EventBase $base ]
            Parameter #1 [ <required> $cb ]
            Parameter #2 [ <required> $data ]
            Parameter #3 [ <required> $flags ]
            Parameter #4 [ <required> $backlog ]
            Parameter #5 [ <required> $target ]
          }
        }

        Method [ <internal:event> public method free ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method enable ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method disable ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method setCallback ] {

          - Parameters [2] {
            Parameter #0 [ <required> $cb ]
            Parameter #1 [ <optional> $arg ]
          }
        }

        Method [ <internal:event> public method setErrorCallback ] {

          - Parameters [1] {
            Parameter #0 [ <required> $cb ]
          }
        }

        Method [ <internal:event> public method getSocketName ] {

          - Parameters [2] {
            Parameter #0 [ <required> &$address ]
            Parameter #1 [ <optional> &$port ]
          }
        }

        Method [ <internal:event> public method getBase ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:event> final class EventHttpConnection ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [11] {
        Method [ <internal:event, ctor> public method __construct ] {

          - Parameters [5] {
            Parameter #0 [ <required> EventBase $base ]
            Parameter #1 [ <required> $dns_base ]
            Parameter #2 [ <required> $address ]
            Parameter #3 [ <required> $port ]
            Parameter #4 [ <required> EventSslContext $ctx ]
          }
        }

        Method [ <internal:event> public method getBase ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getPeer ] {

          - Parameters [2] {
            Parameter #0 [ <required> &$address ]
            Parameter #1 [ <required> &$port ]
          }
        }

        Method [ <internal:event> public method setLocalAddress ] {

          - Parameters [1] {
            Parameter #0 [ <required> $address ]
          }
        }

        Method [ <internal:event> public method setLocalPort ] {

          - Parameters [1] {
            Parameter #0 [ <required> $port ]
          }
        }

        Method [ <internal:event> public method setTimeout ] {

          - Parameters [1] {
            Parameter #0 [ <required> $timeout ]
          }
        }

        Method [ <internal:event> public method setMaxHeadersSize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $max_size ]
          }
        }

        Method [ <internal:event> public method setMaxBodySize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $max_size ]
          }
        }

        Method [ <internal:event> public method setRetries ] {

          - Parameters [1] {
            Parameter #0 [ <required> $retries ]
          }
        }

        Method [ <internal:event> public method makeRequest ] {

          - Parameters [3] {
            Parameter #0 [ <required> $req ]
            Parameter #1 [ <required> $type ]
            Parameter #2 [ <required> $uri ]
          }
        }

        Method [ <internal:event> public method setCloseCallback ] {

          - Parameters [2] {
            Parameter #0 [ <required> $callback ]
            Parameter #1 [ <optional> $data ]
          }
        }
      }
    }

    Class [ <internal:event> final class EventHttp ] {

      - Constants [0] {
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [11] {
        Method [ <internal:event, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> EventBase $base ]
            Parameter #1 [ <optional> EventSslContext $ctx ]
          }
        }

        Method [ <internal:event> public method accept ] {

          - Parameters [1] {
            Parameter #0 [ <required> $socket ]
          }
        }

        Method [ <internal:event> public method bind ] {

          - Parameters [2] {
            Parameter #0 [ <required> $address ]
            Parameter #1 [ <required> $port ]
          }
        }

        Method [ <internal:event> public method setCallback ] {

          - Parameters [3] {
            Parameter #0 [ <required> $path ]
            Parameter #1 [ <required> $cb ]
            Parameter #2 [ <optional> $arg ]
          }
        }

        Method [ <internal:event> public method setDefaultCallback ] {

          - Parameters [2] {
            Parameter #0 [ <required> $cb ]
            Parameter #1 [ <optional> $arg ]
          }
        }

        Method [ <internal:event> public method setAllowedMethods ] {

          - Parameters [1] {
            Parameter #0 [ <required> $methods ]
          }
        }

        Method [ <internal:event> public method setMaxBodySize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:event> public method setMaxHeadersSize ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:event> public method setTimeout ] {

          - Parameters [1] {
            Parameter #0 [ <required> $value ]
          }
        }

        Method [ <internal:event> public method addServerAlias ] {

          - Parameters [1] {
            Parameter #0 [ <required> $alias ]
          }
        }

        Method [ <internal:event> public method removeServerAlias ] {

          - Parameters [1] {
            Parameter #0 [ <required> $alias ]
          }
        }
      }
    }

    Class [ <internal:event> final class EventHttpRequest ] {

      - Constants [11] {
        Constant [ integer CMD_GET ] { 1 }
        Constant [ integer CMD_POST ] { 2 }
        Constant [ integer CMD_HEAD ] { 4 }
        Constant [ integer CMD_PUT ] { 8 }
        Constant [ integer CMD_DELETE ] { 16 }
        Constant [ integer CMD_OPTIONS ] { 32 }
        Constant [ integer CMD_TRACE ] { 64 }
        Constant [ integer CMD_CONNECT ] { 128 }
        Constant [ integer CMD_PATCH ] { 256 }
        Constant [ integer INPUT_HEADER ] { 1 }
        Constant [ integer OUTPUT_HEADER ] { 2 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [0] {
      }

      - Methods [23] {
        Method [ <internal:event, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $callback ]
            Parameter #1 [ <optional> $data ]
          }
        }

        Method [ <internal:event> public method free ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getCommand ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getHost ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getUri ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getResponseCode ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getInputHeaders ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getOutputHeaders ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getInputBuffer ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getOutputBuffer ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method sendError ] {

          - Parameters [2] {
            Parameter #0 [ <required> $error ]
            Parameter #1 [ <optional> $reason ]
          }
        }

        Method [ <internal:event> public method sendReply ] {

          - Parameters [3] {
            Parameter #0 [ <required> $code ]
            Parameter #1 [ <required> $reason ]
            Parameter #2 [ <optional> $buf ]
          }
        }

        Method [ <internal:event> public method sendReplyChunk ] {

          - Parameters [1] {
            Parameter #0 [ <required> $buf ]
          }
        }

        Method [ <internal:event> public method sendReplyEnd ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method sendReplyStart ] {

          - Parameters [2] {
            Parameter #0 [ <required> $code ]
            Parameter #1 [ <required> $reason ]
          }
        }

        Method [ <internal:event> public method cancel ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method addHeader ] {

          - Parameters [3] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $value ]
            Parameter #2 [ <required> $type ]
          }
        }

        Method [ <internal:event> public method clearHeaders ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method removeHeader ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $type ]
          }
        }

        Method [ <internal:event> public method findHeader ] {

          - Parameters [2] {
            Parameter #0 [ <required> $key ]
            Parameter #1 [ <required> $type ]
          }
        }

        Method [ <internal:event> public method getBufferEvent ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method getConnection ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> public method closeConnection ] {

          - Parameters [0] {
          }
        }
      }
    }

    Class [ <internal:event> abstract final class EventUtil ] {

      - Constants [26] {
        Constant [ integer AF_INET ] { 2 }
        Constant [ integer AF_INET6 ] { 10 }
        Constant [ integer AF_UNIX ] { 1 }
        Constant [ integer AF_UNSPEC ] { 0 }
        Constant [ integer SO_DEBUG ] { 1 }
        Constant [ integer SO_REUSEADDR ] { 2 }
        Constant [ integer SO_KEEPALIVE ] { 9 }
        Constant [ integer SO_DONTROUTE ] { 5 }
        Constant [ integer SO_LINGER ] { 13 }
        Constant [ integer SO_BROADCAST ] { 6 }
        Constant [ integer SO_OOBINLINE ] { 10 }
        Constant [ integer SO_SNDBUF ] { 7 }
        Constant [ integer SO_RCVBUF ] { 8 }
        Constant [ integer SO_SNDLOWAT ] { 19 }
        Constant [ integer SO_RCVLOWAT ] { 18 }
        Constant [ integer SO_SNDTIMEO ] { 21 }
        Constant [ integer SO_RCVTIMEO ] { 20 }
        Constant [ integer SO_TYPE ] { 3 }
        Constant [ integer SO_ERROR ] { 4 }
        Constant [ integer SOL_SOCKET ] { 1 }
        Constant [ integer SOL_TCP ] { 6 }
        Constant [ integer SOL_UDP ] { 17 }
        Constant [ integer SOCK_RAW ] { 3 }
        Constant [ integer IPPROTO_IP ] { 0 }
        Constant [ integer IPPROTO_IPV6 ] { 41 }
        Constant [ integer LIBEVENT_VERSION_NUMBER ] { 33560064 }
      }

      - Static properties [0] {
      }

      - Static methods [7] {
        Method [ <internal:event> static public method getLastSocketErrno ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $socket ]
          }
        }

        Method [ <internal:event> static public method getLastSocketError ] {

          - Parameters [1] {
            Parameter #0 [ <optional> $socket ]
          }
        }

        Method [ <internal:event> static public method sslRandPoll ] {

          - Parameters [0] {
          }
        }

        Method [ <internal:event> static public method getSocketName ] {

          - Parameters [3] {
            Parameter #0 [ <required> $socket ]
            Parameter #1 [ <required> &$address ]
            Parameter #2 [ <optional> &$port ]
          }
        }

        Method [ <internal:event> static public method getSocketFd ] {

          - Parameters [1] {
            Parameter #0 [ <required> $socket ]
          }
        }

        Method [ <internal:event> static public method setSocketOption ] {

          - Parameters [4] {
            Parameter #0 [ <required> $socket ]
            Parameter #1 [ <required> $level ]
            Parameter #2 [ <required> $optname ]
            Parameter #3 [ <required> $optval ]
          }
        }

        Method [ <internal:event> static public method createSocket ] {

          - Parameters [1] {
            Parameter #0 [ <required> $fd ]
          }
        }
      }

      - Properties [0] {
      }

      - Methods [1] {
        Method [ <internal:event, ctor> abstract public method __construct ] {
        }
      }
    }

    Class [ <internal:event> final class EventSslContext ] {

      - Constants [27] {
        Constant [ integer SSLv3_CLIENT_METHOD ] { 2 }
        Constant [ integer SSLv3_SERVER_METHOD ] { 6 }
        Constant [ integer TLS_CLIENT_METHOD ] { 4 }
        Constant [ integer TLS_SERVER_METHOD ] { 8 }
        Constant [ integer TLSv11_CLIENT_METHOD ] { 9 }
        Constant [ integer TLSv11_SERVER_METHOD ] { 10 }
        Constant [ integer TLSv12_CLIENT_METHOD ] { 11 }
        Constant [ integer TLSv12_SERVER_METHOD ] { 12 }
        Constant [ integer OPT_LOCAL_CERT ] { 1 }
        Constant [ integer OPT_LOCAL_PK ] { 2 }
        Constant [ integer OPT_PASSPHRASE ] { 3 }
        Constant [ integer OPT_CA_FILE ] { 4 }
        Constant [ integer OPT_CA_PATH ] { 5 }
        Constant [ integer OPT_ALLOW_SELF_SIGNED ] { 6 }
        Constant [ integer OPT_VERIFY_PEER ] { 7 }
        Constant [ integer OPT_VERIFY_DEPTH ] { 8 }
        Constant [ integer OPT_CIPHERS ] { 9 }
        Constant [ integer OPT_NO_SSLv2 ] { 10 }
        Constant [ integer OPT_NO_SSLv3 ] { 11 }
        Constant [ integer OPT_NO_TLSv1 ] { 12 }
        Constant [ integer OPT_NO_TLSv1_1 ] { 13 }
        Constant [ integer OPT_NO_TLSv1_2 ] { 14 }
        Constant [ integer OPT_CIPHER_SERVER_PREFERENCE ] { 15 }
        Constant [ integer OPT_REQUIRE_CLIENT_CERT ] { 16 }
        Constant [ integer OPT_VERIFY_CLIENT_ONCE ] { 17 }
        Constant [ string OPENSSL_VERSION_TEXT ] { OpenSSL 1.0.2j-fips  26 Sep 2016 }
        Constant [ integer OPENSSL_VERSION_NUMBER ] { 268443823 }
      }

      - Static properties [0] {
      }

      - Static methods [0] {
      }

      - Properties [2] {
        Property [ <default> public $local_cert ]
        Property [ <default> public $local_pk ]
      }

      - Methods [1] {
        Method [ <internal:event, ctor> public method __construct ] {

          - Parameters [2] {
            Parameter #0 [ <required> $method ]
            Parameter #1 [ <required> $options ]
          }
        }
      }
    }
  }
}

